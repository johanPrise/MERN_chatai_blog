import { connectDB } from '../config/database.js';
import { Post } from '../models/post.model.js';
import { PostStatus } from '../types/post.types.js';

/**
 * Script pour corriger les dates de publication manquantes
 * Met √† jour tous les articles publi√©s qui n'ont pas de publishedAt
 */
async function fixPublishedDates() {
  try {
    console.log('üîÑ Connexion √† la base de donn√©es...');
    await connectDB();

    console.log('üîç Recherche des articles publi√©s sans date de publication...');
    
    // Trouver tous les articles publi√©s sans publishedAt
    const postsWithoutPublishedAt = await Post.find({
      status: PostStatus.PUBLISHED,
      $or: [
        { publishedAt: { $exists: false } },
        { publishedAt: null }
      ]
    });

    console.log(`üìä Trouv√© ${postsWithoutPublishedAt.length} articles √† corriger`);

    if (postsWithoutPublishedAt.length === 0) {
      console.log('‚úÖ Aucun article √† corriger');
      process.exit(0);
    }

    // Mettre √† jour chaque article
    let updatedCount = 0;
    for (const post of postsWithoutPublishedAt) {
      try {
        // Utiliser createdAt comme date de publication par d√©faut
        const publishedAt = post.createdAt;
        
        await Post.findByIdAndUpdate(post._id, {
          publishedAt: publishedAt
        });

        console.log(`‚úÖ Article "${post.title}" mis √† jour avec publishedAt: ${publishedAt}`);
        updatedCount++;
      } catch (error) {
        console.error(`‚ùå Erreur lors de la mise √† jour de l'article "${post.title}":`, error);
      }
    }

    console.log(`üéâ Termin√© ! ${updatedCount}/${postsWithoutPublishedAt.length} articles mis √† jour`);
    
    // V√©rification finale
    console.log('üîç V√©rification finale...');
    const remainingPosts = await Post.find({
      status: PostStatus.PUBLISHED,
      $or: [
        { publishedAt: { $exists: false } },
        { publishedAt: null }
      ]
    });

    if (remainingPosts.length === 0) {
      console.log('‚úÖ Tous les articles publi√©s ont maintenant une date de publication');
    } else {
      console.log(`‚ö†Ô∏è  Il reste ${remainingPosts.length} articles sans date de publication`);
    }

  } catch (error) {
    console.error('‚ùå Erreur lors de l\'ex√©cution du script:', error);
    process.exit(1);
  }

  process.exit(0);
}

// Ex√©cuter le script si appel√© directement
if (import.meta.url === `file://${process.argv[1]}`) {
  fixPublishedDates();
}

export { fixPublishedDates };